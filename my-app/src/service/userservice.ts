// services/userService.ts
import { authService } from './authservice.ts';

// ===== B∆Ø·ªöC 2.1: INTERFACE USER =====
export interface User {
    id: number;
    username: string;
    email: string;
    role: string;
    created_at?: string;
    updated_at?: string;
}

// ===== B∆Ø·ªöC 2.2: USER SERVICE CLASS =====
class UserService {
    private readonly API_URL = 'http://localhost:8000';

    /**
     * B∆Ø·ªöC 2.3: G·ªçi API l·∫•y th√¥ng tin user theo username
     */
    async getUserByUsername(username: string): Promise<User | null> {
        try {
            console.log(`üì° ƒêang g·ªçi API l·∫•y th√¥ng tin user: ${username}`);

            // L·∫•y token ƒë·ªÉ g·ª≠i k√®m request
            const token = authService.getToken();
            if (!token) {
                throw new Error('Kh√¥ng c√≥ token');
            }

            // G·ªçi API (gi·∫£ s·ª≠ endpoint l√† /users/{username})
            const response = await fetch(`${this.API_URL}/users/by-username/${username}`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json',
                }
            });

            if (!response.ok) {
                throw new Error(`L·ªói ${response.status}: ${response.statusText}`);
            }

            const userData: User = await response.json();
            console.log('‚úÖ ƒê√£ l·∫•y ƒë∆∞·ª£c th√¥ng tin user:', userData);

            // L∆∞u v√†o localStorage ƒë·ªÉ d√πng offline
            localStorage.setItem('user_data', JSON.stringify(userData));

            return userData;

        } catch (error: any) {
            console.error('‚ùå L·ªói khi l·∫•y th√¥ng tin user:', error.message);

            // Th·ª≠ l·∫•y t·ª´ localStorage n·∫øu c√≥
            const cached = localStorage.getItem('user_data');
            if (cached) {
                console.log('üì¶ S·ª≠ d·ª•ng d·ªØ li·ªáu user t·ª´ cache');
                return JSON.parse(cached);
            }

            return null;
        }
    }

    /**
     * B∆Ø·ªöC 2.4: L·∫•y th√¥ng tin user hi·ªán t·∫°i
     * (L·∫•y username t·ª´ token r·ªìi g·ªçi API)
     */
    async getCurrentUser(): Promise<User | null> {
        // L·∫•y username ƒë√£ l∆∞u
        const username = authService.getStoredUsername();

        if (!username) {
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y username');
            return null;
        }

        // G·ªçi API l·∫•y th√¥ng tin
        return await this.getUserByUsername(username);
    }

    /**
     * B∆Ø·ªöC 2.5: X√≥a cache user
     */
    clearUserCache(): void {
        localStorage.removeItem('user_data');
    }
}

// Export instance duy nh·∫•t
export const userService = new UserService();