// contexts/AuthContext.tsx
import React, { createContext, useContext, useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { authService } from '../service/authservice.ts';
import { userService } from '../service/userservice.ts';
import type { LoginRequest } from '../types/auth.ts';
import type { User } from '../service/userservice.ts';
// ===== B∆Ø·ªöC 3.1: INTERFACE CONTEXT =====
interface AuthContextType {
    // State
    user: User | null;
    setUser: React.Dispatch<React.SetStateAction<User | null>>;
    isAuthenticated: boolean;
    isLoading: boolean;
    remainingTime: number; // Th·ªùi gian c√≤n l·∫°i (gi√¢y)
    role: string | null;
    setRole: React.Dispatch<React.SetStateAction<string | null>>;
    username: string;

    // Actions
    login: (credentials: LoginRequest) => Promise<boolean>;
    logout: () => void;
}

// ===== B∆Ø·ªöC 3.2: T·∫†O CONTEXT =====
const AuthContext = createContext<AuthContextType | undefined>(undefined);

// ===== B∆Ø·ªöC 3.3: PROVIDER COMPONENT =====
export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const navigate = useNavigate();

    // State
    const [user, setUser] = useState<User | null>(null);
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const [isLoading, setIsLoading] = useState(true);
    const [remainingTime, setRemainingTime] = useState(0);
    const [role,setRole] = useState<string | null>(null);
    const [username, setUsername] = useState<string>('');
    /**
     * B∆Ø·ªöC 3.4: H√†m ƒëƒÉng nh·∫≠p
     */
    const login = async (credentials: LoginRequest): Promise<boolean> => {
        setIsLoading(true);

        try {
            // G·ªçi authService ƒë·ªÉ login
            const result = await authService.login(credentials);

            if (!result.success) {
                alert(result.error || 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i');
                return false;
            }
            setRole(result.role?.toString() || 'unknow');
            setUsername(result.username || '');
            // B∆Ø·ªöC 3.5: Sau khi login th√†nh c√¥ng, l·∫•y th√¥ng tin user
            console.log('üîÑ ƒêang l·∫•y th√¥ng tin user...');
            const userData = await userService.getCurrentUser();

            if (userData) {
                setUser(userData[0]);
                setIsAuthenticated(true);
                console.log('‚úÖ ƒê√£ l·∫•y ƒë∆∞·ª£c th√¥ng tin user:', userData);

                // Chuy·ªÉn ƒë·∫øn dashboard
                navigate('/home-page', { replace: true });
                return true;
            } else {
                throw new Error('Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin user');
            }
        } catch (error: any) {
            console.error('‚ùå L·ªói ƒëƒÉng nh·∫≠p:', error);
            setIsAuthenticated(false);
            setUser(null);
            return false;
        } finally {
            setIsLoading(false);
        }
    };

    /**
     * B∆Ø·ªöC 3.6: H√†m ƒëƒÉng xu·∫•t
     */
    const logout = () => {
        console.log('üëã ƒêƒÉng xu·∫•t t·ª´ context...');

        // X√≥a t·∫•t c·∫£ d·ªØ li·ªáu
        authService.logout();
        userService.clearUserCache();

        // Reset state
        setUser(null);
        setIsAuthenticated(false);
        setRemainingTime(0);

        // Chuy·ªÉn v·ªÅ trang login
        navigate('/login');
    };

    /**
     * B∆Ø·ªöC 3.7: Ki·ªÉm tra auth khi load app
     */
    useEffect(() => {
        const checkAuth = async () => {
            console.log('üîç Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p...');
            setIsLoading(true);

            // Ki·ªÉm tra token c√≤n h·∫°n kh√¥ng
            if (!authService.isTokenExpired()) {
                // Token c√≤n h·∫°n, l·∫•y th√¥ng tin user
                const userData = await userService.getCurrentUser();
                if (userData) {
                    setUser(userData);
                    setIsAuthenticated(true);
                    console.log('‚úÖ ƒê√£ ƒëƒÉng nh·∫≠p v·ªõi user:', userData.name);
                }
            } else {
                console.log('‚ùå Token ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng t·ªìn t·∫°i');
            }

            setIsLoading(false);
        };

        checkAuth();
    }, []);

    /**
     * B∆Ø·ªöC 3.8: COUNTDOWN TIMER - ƒê·∫øm ng∆∞·ª£c th·ªùi gian token
     */
    useEffect(() => {
        // Ch·ªâ ch·∫°y khi ƒë√£ ƒëƒÉng nh·∫≠p
        if (!isAuthenticated) return;

        console.log('‚è∞ B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c th·ªùi gian token...');

        // C·∫≠p nh·∫≠t m·ªói gi√¢y
        const interval = setInterval(() => {
            const remaining = authService.getTokenRemainingTime();
            setRemainingTime(remaining);

            // Log m·ªói 10 gi√¢y
            if (remaining % 10 === 0) {
                console.log(`‚è±Ô∏è Token c√≤n l·∫°i: ${remaining} gi√¢y`);
            }

            // B∆Ø·ªöC 3.9: T·ª∞ ƒê·ªòNG LOGOUT KHI H·∫æT H·∫†N
            if (remaining <= 0) {
                console.log('üî¥ Token ƒë√£ h·∫øt h·∫°n - T·ª± ƒë·ªông ƒëƒÉng xu·∫•t');
                alert('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
                logout();
            }

            // C·∫£nh b√°o khi s·∫Øp h·∫øt h·∫°n (< 60 gi√¢y)
            if (remaining === 60) {
                alert('‚ö†Ô∏è Phi√™n ƒëƒÉng nh·∫≠p s·∫Ω h·∫øt h·∫°n sau 1 ph√∫t!');
            }
        }, 1000); // C·∫≠p nh·∫≠t m·ªói 1 gi√¢y

        // Cleanup khi unmount
        return () => {
            console.log('üßπ D·ª´ng countdown timer');
            clearInterval(interval);
        };
    }, [isAuthenticated]); // Ch·ªâ ch·∫°y l·∫°i khi isAuthenticated thay ƒë·ªïi

    // ===== B∆Ø·ªöC 3.10: CONTEXT VALUE =====
    const contextValue: AuthContextType = {
        user,
        setUser,
        isAuthenticated,
        isLoading,
        remainingTime,
        login,
        logout,
        role,
        setRole,
        username
    };

    return (
        <AuthContext.Provider value={contextValue}>
            {children}
        </AuthContext.Provider>
    );
};

// ===== B∆Ø·ªöC 3.11: CUSTOM HOOK =====
export const useAuth = () => {
    const context = useContext(AuthContext);
    if (!context) {
        throw new Error('useAuth ph·∫£i ƒë∆∞·ª£c s·ª≠ d·ª•ng trong AuthProvider');
    }
    return context;
};